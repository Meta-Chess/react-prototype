import {
  castling,
  cylindrical,
  hex,
  hexCylindrical,
  loseWithNoKings,
  mobius,
  passiveMoveThroughBoard,
  pawnDoubleStep,
  polar,
  standard,
  longBoard,
  Interception,
} from "./Rules";
import { verticallyCylindrical } from "game/Rules/verticallyCylindrical";
import { Colors } from "primitives";
import * as VariantImages from "primitives/VariantImage";

export type VariantName = keyof typeof variants;
export const variants = {
  ["Chess"]: {
    description: "Your usual bog-standard game of chess (sans en passant).",
    rules: [standard, loseWithNoKings, pawnDoubleStep, castling, Interception],
  },
  ["Cylindrical Chess"]: {
    description: "Chess on a Cylinder! You can move through the sides of the board.",
    rules: [
      standard,
      loseWithNoKings,
      pawnDoubleStep,
      cylindrical,
      castling,
      Interception,
    ],
  },
  ["Spherical Chess"]: {
    description:
      "Chess on a sphere! You can move through the sides like you're on a cylinder, and through the top and bottom as if they were the poles of a sphere.",
    rules: [
      standard,
      loseWithNoKings,
      pawnDoubleStep,
      cylindrical,
      polar,
      castling,
      Interception,
    ],
  },
  ["Hex Chess"]: {
    description:
      "Chess but with hexagons instead of squares. Watch out for the sneaky bishops.",
    rules: [hex, loseWithNoKings, pawnDoubleStep, castling, Interception],
  },
  ["Cylindrical Hex Chess"]: {
    description: "Hexagonal chess where you can move through the sides of the board!",
    rules: [hex, loseWithNoKings, pawnDoubleStep, hexCylindrical, castling, Interception],
  },
  ["Toroidal Chess"]: {
    description:
      "Chess on a torus! You can move through any edge onto the opposite edge.",
    rules: [
      longBoard,
      cylindrical,
      verticallyCylindrical,
      loseWithNoKings,
      pawnDoubleStep,
      castling,
      Interception,
    ],
  },
  ["Möbius Chess"]: {
    description:
      "Chess on a Möbius strip! You can move through the top and bottom edges, and you can see the pieces on the opposite side of the strip!",
    rules: [
      mobius,
      passiveMoveThroughBoard,
      longBoard,
      verticallyCylindrical,
      loseWithNoKings,
      pawnDoubleStep,
      castling,
      Interception,
    ],
  },
};

export enum FutureVariantName {
  threeCheck,
  armageddon,
  atomic,
  catapult,
  centerRemoval,
  chessPlus,
  cylinder,
  diagonalMirror,
  dpsKing,
  emptyCenter,
  extinction,
  kingOfTheSixthRank,
  kingOfTheHill,
  monochromatic,
  patheticKing,
  phaseKing,
  push,
  seventhRankPromotion,
  dancingKings,
  alice,
  ambiguous,
  avalanche,
  castleAnyside,
  castleForever,
  chainReaction,
  chemicallyExcitedKnight,
  claudiusPromotion,
  colourBlindSignal,
  connectFour,
  connectFive,
  crazyhouse,
  captureExplosion,
  diagonalValley,
  fatigue,
  fortifications,
  fourHorsemenOfTheApocalypse,
  gambit,
  hill,
  horizontalValley,
  infiniteStaircase,
  invertedPyramid,
  limitedReaction,
  loseOnStalemate,
  moraleVictory,
  moveAsterixMoveAsterixAsterixSignal,
  noFork,
  parity,
  polar,
  prism,
  regicide,
  signal,
  spherical,
  verticalValley,
  veto,
  vocation,
  winOnCapture,
  winOnPromotion,
  winOnStalemate,
  zoneOfControl,
  zoneOfFatigue,
  puppeteers,
  lethalPressure,
  coordination,
  retreatingPawns,
  combinationMove,
  pawnOrbit,
  centerfold,
  goCapture,
  stuckInTheMud,
  compactify,
  pinch,
  morphlings,
  jumble,
  pull,
  noPin,
  hex,
  generalEnpassant,
}

export interface variantInterface {
  title: string;
  short_description: string;
  trait_classes: string[];
  icon_name: keyof typeof VariantImages;
}

export const futureVariants: { [k in FutureVariantName]: variantInterface } = {
  [FutureVariantName.threeCheck]: {
    title: "3-Check",
    short_description: "3 checks and you're out.",
    trait_classes: ["game end"],
    icon_name: "threeCheckImage",
  },
  [FutureVariantName.armageddon]: {
    title: "Armageddon",
    short_description:
      "Captures lead to a large explosion. Pawns are immune to the blast zone.",
    trait_classes: ["ability"],
    icon_name: "armageddonImage",
  },
  [FutureVariantName.atomic]: {
    title: "Atomic",
    short_description:
      "Captures lead to a small explosion. Pawns are immune to the blast zone.",
    trait_classes: ["ability"],
    icon_name: "atomicImage",
  },
  [FutureVariantName.catapult]: {
    title: "Catapult",
    short_description: "Pieces can throw other pieces occupying the same square.",
    trait_classes: ["ability"],
    icon_name: "catapultImage",
  },
  [FutureVariantName.centerRemoval]: {
    title: "Center Removal",
    short_description: "Center squares and the pieces on them are removed from the game.",
    trait_classes: ["world"],
    icon_name: "centerRemovalImage",
  },
  [FutureVariantName.chessPlus]: {
    title: "Chess +",
    short_description: "2 non-king pieces are allowed on a square.",
    trait_classes: ["ability"],
    icon_name: "chessPlusImage",
  },
  [FutureVariantName.cylinder]: {
    title: "Cylinder",
    short_description: "End columns of the board are glued together.",
    trait_classes: ["geometry"],
    icon_name: "cylinderImage",
  },
  [FutureVariantName.diagonalMirror]: {
    title: "Diagonal Mirror",
    short_description: "Diagonal movers bounce off the end of the board.",
    trait_classes: ["world"],
    icon_name: "diagonalMirrorImage",
  },
  [FutureVariantName.dpsKing]: {
    title: "DPS King",
    short_description: "Kings can capture all pieces surrounding them.",
    trait_classes: ["piece", "ability"],
    icon_name: "dpsKingImage",
  },
  [FutureVariantName.emptyCenter]: {
    title: "Empty Center",
    short_description: "Pieces can move through but not on the center of the board.",
    trait_classes: ["restriction"],
    icon_name: "emptyCenterImage",
  },
  [FutureVariantName.extinction]: {
    title: "Extinction",
    short_description: "Lose the game if any piece goes extinct.",
    trait_classes: ["game end"],
    icon_name: "extinctionImage",
  },
  [FutureVariantName.kingOfTheSixthRank]: {
    title: "King of the 6th Rank",
    short_description: "Win the game with a king reaching the 6th rank.",
    trait_classes: ["game end"],
    icon_name: "kingOfTheSixthRankImage",
  },
  [FutureVariantName.kingOfTheHill]: {
    title: "King of the Hill",
    short_description: "Win the game with a king reaching the center.",
    trait_classes: ["game end"],
    icon_name: "kingOfTheHillImage",
  },
  [FutureVariantName.monochromatic]: {
    title: "Monochromatic",
    short_description: "Pieces must move onto the same coloured square.",
    trait_classes: ["restriction"],
    icon_name: "monochromaticImage",
  },
  [FutureVariantName.patheticKing]: {
    title: "Pathetic King",
    short_description: "Kings cannot capture.",
    trait_classes: ["piece", "restriction"],
    icon_name: "patheticKingImage",
  },
  [FutureVariantName.phaseKing]: {
    title: "Phase King",
    short_description: "Kings may move onto friendly pieces.",
    trait_classes: ["piece", "ability"],
    icon_name: "phaseKingImage",
  },
  [FutureVariantName.push]: {
    title: "Push",
    short_description: "Push chains of neighbouring friendly pieces.",
    trait_classes: ["ability"],
    icon_name: "pushImage",
  },
  [FutureVariantName.seventhRankPromotion]: {
    title: "7th Rank Promotion",
    short_description: "Promote on the 7th rank.",
    trait_classes: ["game end"],
    icon_name: "seventhRankPromotionImage",
  },
  [FutureVariantName.dancingKings]: {
    title: "Dancing Kings",
    short_description: "Keep the king moving or lose the game.",
    trait_classes: ["piece", "game end"],
    icon_name: "dancingKingsImage",
  },
  [FutureVariantName.alice]: {
    title: "Alice",
    short_description: "Pieces move between worlds.",
    trait_classes: ["world"],
    icon_name: "aliceImage",
  },
  [FutureVariantName.ambiguous]: {
    title: "Ambiguous",
    short_description: "Choose a square and your opponent chooses the move.",
    trait_classes: ["interaction", "restriction"],
    icon_name: "ambiguousImage",
  },
  [FutureVariantName.avalanche]: {
    title: "Avalanche",
    short_description: "After moving, make a non capturing pawn move for your opponent.",
    trait_classes: ["piece", "interaction"],
    icon_name: "avalancheImage",
  },
  [FutureVariantName.castleAnyside]: {
    title: "Castle Anyside",
    short_description: "Kings can castle with any friendly piece on a straight line.",
    trait_classes: ["ability"],
    icon_name: "castleAnysideImage",
  },
  [FutureVariantName.castleForever]: {
    title: "Castle Forever",
    short_description: "Moving pieces does not remove their castling rights.",
    trait_classes: ["ability"],
    icon_name: "castleForeverImage",
  },
  [FutureVariantName.chainReaction]: {
    title: "Chain Reaction",
    short_description: "A captured piece captures all pieces it is attacking.",
    trait_classes: ["ability"],
    icon_name: "chainReactionImage",
  },
  [FutureVariantName.chemicallyExcitedKnight]: {
    title: "Chemically Excited Knight",
    short_description: "Any time a knight is attacking 3 pieces, it explodes.",
    trait_classes: ["piece", "ability"],
    icon_name: "chemicallyExcitedKnightImage",
  },
  [FutureVariantName.claudiusPromotion]: {
    title: "Claudius Promotion",
    short_description: "Pawns may promote to replace a king.",
    trait_classes: ["piece", "ability"],
    icon_name: "claudiusPromotionImage",
  },
  [FutureVariantName.colourBlindSignal]: {
    title: "Colour Blind Signalling",
    short_description: "Signal pieces of any colour to move them next turn.",
    trait_classes: ["interaction", "restriction"],
    icon_name: "colourBlindSignalImage",
  },
  [FutureVariantName.connectFour]: {
    title: "Connect Five",
    short_description: "4 friendly pawns diagonally connected win the game.",
    trait_classes: ["game end"],
    icon_name: "connectFourImage",
  },
  [FutureVariantName.connectFive]: {
    title: "Connect Four",
    short_description: "5 friendly pieces diagonally connected win the game.",
    trait_classes: ["game end"],
    icon_name: "connectFiveImage",
  },
  [FutureVariantName.crazyhouse]: {
    title: "Crazyhouse",
    short_description: "Play captured pieces on the board.",
    trait_classes: ["ability"],
    icon_name: "crazyhouseImage",
  },
  [FutureVariantName.captureExplosion]: {
    title: "Capture Explosion",
    short_description:
      "Pieces capture themselves and diagonal neighbours after capturing.",
    trait_classes: ["ability"],
    icon_name: "captureExplosionImage",
  },
  [FutureVariantName.diagonalValley]: {
    title: "Diagonal Valley",
    short_description: "The board is a valley bottoming out along the main diagonals.",
    trait_classes: ["world"],
    icon_name: "diagonalValleyImage",
  },
  [FutureVariantName.fatigue]: {
    title: "Fatigue",
    short_description:
      "Pieces can't be moved twice in a row, unless they can kill the king.",
    trait_classes: ["restriction"],
    icon_name: "fatigueImage",
  },
  [FutureVariantName.fortifications]: {
    title: "Fortifications",
    short_description: "Rooks cannot capture or be captured.",
    trait_classes: ["piece", "ability"],
    icon_name: "fortificationsImage",
  },
  [FutureVariantName.fourHorsemenOfTheApocalypse]: {
    title: "Four Horsemen of the Apocalypse",
    short_description: "Control 4 knights on board to win the game.",
    trait_classes: ["game end"],
    icon_name: "fourHorsemenOfTheApocalypseImage",
  },
  [FutureVariantName.gambit]: {
    title: "Gambit",
    short_description: "Pieces may capture friendly pieces.",
    trait_classes: ["ability"],
    icon_name: "gambitImage",
  },
  [FutureVariantName.hill]: {
    title: "Hill",
    short_description: "An elevation at the center of the board.",
    trait_classes: ["world"],
    icon_name: "hillImage",
  },
  [FutureVariantName.horizontalValley]: {
    title: "Horizontal Valley",
    short_description: "The board is a valley bottoming out at the center rows.",
    trait_classes: ["world"],
    icon_name: "horizontalValleyImage",
  },
  [FutureVariantName.infiniteStaircase]: {
    title: "Infinite Staircase",
    short_description:
      "The board decends forever to white's left and ascends forever to the right.",
    trait_classes: ["world", "geometry"],
    icon_name: "infiniteStaircaseImage",
  },
  [FutureVariantName.invertedPyramid]: {
    title: "Inverted Pyramid",
    short_description: "The board decends in layers bottoming out at the center.",
    trait_classes: ["world"],
    icon_name: "invertedPyramidImage",
  },
  [FutureVariantName.limitedReaction]: {
    title: "Limited Reaction",
    short_description:
      "A captured piece captures all pieces it is attacking, except if the piece was captured via limited reaction.",
    trait_classes: ["ability"],
    icon_name: "limitedReactionImage",
  },
  [FutureVariantName.loseOnStalemate]: {
    title: "Lose On Stalemate",
    short_description: "Having no legal moves is a loss.",
    trait_classes: ["game end"],
    icon_name: "loseOnStalemateImage",
  },
  [FutureVariantName.moraleVictory]: {
    title: "Morale Victory",
    short_description: "Lose the game without any pawns.",
    trait_classes: ["game end"],
    icon_name: "moraleVictoryImage",
  },
  [FutureVariantName.moveAsterixMoveAsterixAsterixSignal]: {
    title: "Move* Move** Signal",
    short_description: "An unsignalled piece, the signalled piece, signal a piece.",
    trait_classes: ["interaction"],
    icon_name: "moveAsterixMoveAsterixAsterixSignalImage",
  },
  [FutureVariantName.noFork]: {
    title: "No Fork",
    short_description: "Knights can no longer attack 2 or more pieces.",
    trait_classes: ["piece", "restriction"],
    icon_name: "noForkImage",
  },
  [FutureVariantName.parity]: {
    title: "Parity",
    short_description: "Pieces must move onto a different coloured square.",
    trait_classes: ["restriction"],
    icon_name: "parityImage",
  },
  [FutureVariantName.polar]: {
    title: "Polar",
    short_description: "Slide through end rows and re-emerge through the same row.",
    trait_classes: ["geometry"],
    icon_name: "polarImage",
  },
  [FutureVariantName.prism]: {
    title: "Prism",
    short_description: "Reflect or refract pieces over the ends of the board.",
    trait_classes: ["geometry", "world"],
    icon_name: "prismImage",
  },
  [FutureVariantName.regicide]: {
    title: "Regicide",
    short_description: "Lose the game without a queen.",
    trait_classes: ["game end"],
    icon_name: "regicideImage",
  },
  [FutureVariantName.signal]: {
    title: "Signal",
    short_description: "Signal a piece to move it next turn.",
    trait_classes: ["restriction"],
    icon_name: "signalImage",
  },
  [FutureVariantName.spherical]: {
    title: "Spherical",
    short_description: "The board wrapped around a sphere. Cylinder together with Polar.",
    trait_classes: ["geometry"],
    icon_name: "sphericalImage",
  },
  [FutureVariantName.verticalValley]: {
    title: "Vertical Valley",
    short_description: "The board is a valley bottoming out at the center columns.",
    trait_classes: ["world"],
    icon_name: "verticalValleyImage",
  },
  [FutureVariantName.veto]: {
    title: "Veto",
    short_description: "A move may be vetoed each turn.",
    trait_classes: ["interaction", "restriction"],
    icon_name: "vetoImage",
  },
  [FutureVariantName.vocation]: {
    title: "Vocation",
    short_description:
      "Any piece kind may promote to any other piece kind. Old kings become pawns.",
    trait_classes: ["ability"],
    icon_name: "vocationImage",
  },
  [FutureVariantName.winOnCapture]: {
    title: "Win on Capture",
    short_description: "Win by capturing an enemy piece with the king.",
    trait_classes: ["game end"],
    icon_name: "winOnCaptureImage",
  },
  [FutureVariantName.winOnPromotion]: {
    title: "Win on Promotion",
    short_description: "Win by promoting a piece.",
    trait_classes: ["game end"],
    icon_name: "winOnPromotionImage",
  },
  [FutureVariantName.winOnStalemate]: {
    title: "Win on Stalemate",
    short_description: "Win by having no legal moves.",
    trait_classes: ["game end"],
    icon_name: "winOnStalemateImage",
  },
  [FutureVariantName.zoneOfControl]: {
    title: "Zone of Control",
    short_description:
      "After moving past an enemy piece, only one more step can be taken.",
    trait_classes: ["ability", "restriction"],
    icon_name: "zoneOfControlImage",
  },
  [FutureVariantName.zoneOfFatigue]: {
    title: "Zone of Fatigue",
    short_description: "Moving past an enemy piece results in fatigue.",
    trait_classes: ["ability", "restriction"],
    icon_name: "zoneOfFatigueImage",
  },
  [FutureVariantName.puppeteers]: {
    title: "Puppeteers",
    short_description: "Any piece defended by a knight can move as a knight.",
    trait_classes: ["piece", "ability"],
    icon_name: "puppeteersImage",
  },
  [FutureVariantName.lethalPressure]: {
    title: "Lethal Pressure",
    short_description: "Pieces attacked 4 or more times are captured.",
    trait_classes: ["ability"],
    icon_name: "lethalPressureImage",
  },
  [FutureVariantName.coordination]: {
    title: "Coordination",
    short_description: "Move multiple pieces to the same square.",
    trait_classes: ["ability"],
    icon_name: "coordinationImage",
  },
  [FutureVariantName.retreatingPawns]: {
    title: "Retreating Pawns",
    short_description:
      "Pawns will run backwards after losing a defender, until redefended.",
    trait_classes: ["piece", "algorithm"],
    icon_name: "retreatingPawnsImage",
  },
  [FutureVariantName.combinationMove]: {
    title: "Combination Move",
    short_description: "Move multiple pieces off of the same square.",
    trait_classes: ["ability"],
    icon_name: "combinationMoveImage",
  },
  [FutureVariantName.pawnOrbit]: {
    title: "Pawn Orbit",
    short_description: "Isolated pawns can shift all neighbouring pieces clockwise.",
    trait_classes: ["piece", "ability"],
    icon_name: "pawnOrbitImage",
  },
  [FutureVariantName.centerfold]: {
    title: "Centerfold",
    short_description:
      "The board is folded along the vertical center line and column ends are glued.",
    trait_classes: ["geometry"],
    icon_name: "centerfoldImage",
  },
  [FutureVariantName.goCapture]: {
    title: "Go Capture",
    short_description: "Capture pieces by surrounding them in a line without gaps.",
    trait_classes: ["ability"],
    icon_name: "goCaptureImage",
  },
  [FutureVariantName.stuckInTheMud]: {
    title: "Stuck In The Mud",
    short_description: "Center squares may be stepped on, but not through.",
    trait_classes: ["restriction"],
    icon_name: "stuckInTheMudImage",
  },
  [FutureVariantName.compactify]: {
    title: "Compactify",
    short_description:
      "Columns without pieces are destroyed, with the board closing around the empty space.",
    trait_classes: ["world"],
    icon_name: "compactifyImage",
  },
  [FutureVariantName.pinch]: {
    title: "Pinch",
    short_description: "Length 2 diagonals are glued on their ends in each corner.",
    trait_classes: ["geometry"],
    icon_name: "pinchImage",
  },
  [FutureVariantName.morphlings]: {
    title: "Morphlings",
    short_description: "After moving bishops become knights and knights become bishops.",
    trait_classes: ["piece", "ability"],
    icon_name: "morphlingsImage",
  },
  [FutureVariantName.jumble]: {
    title: "Jumble",
    short_description: "Move multiple pieces on and off of the same square.",
    trait_classes: ["ability"],
    icon_name: "jumbleImage",
  },
  [FutureVariantName.pull]: {
    title: "Pull",
    short_description: "Pull chains of neighbouring friendly pieces.",
    trait_classes: ["ability"],
    icon_name: "pullImage",
  },
  [FutureVariantName.noPin]: {
    title: "No Pin",
    short_description:
      "Bishops cannot attack a piece if when the piece is removed the bishop would be attacking another piece.",
    trait_classes: ["piece", "restriction"],
    icon_name: "noPinImage",
  },
  [FutureVariantName.hex]: {
    title: "Hex",
    short_description: "A board tiled with hexagons.",
    trait_classes: ["world"],
    icon_name: "hexImage",
  },
  [FutureVariantName.generalEnpassant]: {
    title: "General Enpassant",
    short_description: "Any piece can enpassant any other.",
    trait_classes: ["ability"],
    icon_name: "generalEnpassantImage",
  },
};

export const traitColors = {
  piece: Colors.TRAIT_CLASS.PIECE,
  restriction: Colors.TRAIT_CLASS.RESTRICTION,
  ability: Colors.TRAIT_CLASS.ABILITY,
  "game end": Colors.TRAIT_CLASS.GAME_END,
  interaction: Colors.TRAIT_CLASS.INTERACTION,
  geometry: Colors.TRAIT_CLASS.GEOMETRY,
  world: Colors.TRAIT_CLASS.WORLD,
  algorithm: Colors.TRAIT_CLASS.ALGORITHM,
};
