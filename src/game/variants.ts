import {
  castling,
  cylindrical,
  hex,
  hexCylindrical,
  loseWithNoKings,
  mobius,
  passiveMoveThroughBoard,
  pawnDoubleStep,
  polar,
  standard,
  longBoard,
  atomic,
  fatigue,
  Interception,
} from "./Rules";
import { verticallyCylindrical } from "game/Rules/verticallyCylindrical";
import { TraitClasses } from "game/types";
import * as VariantImages from "primitives/VariantImage";
import { Rule } from "./Rules";

//should the strings be type declared as Rule["name"]?
export const ruleFuseMap: { [id: string]: { [id: string]: Rule[] } } = {
  //should maybe live in Rules, didn't want to duplicate importing Rules
  Cylinder: {
    Hexagon: [hexCylindrical],
  },
  Standard: {
    Hexagon: [],
    "Long board": [],
  },
};

export const variantsBlacklist: {
  [id: string]: {
    [id: string]: string;
  };
} = {
  hex: {
    toroidal: "",
    mobius: "",
    spherical: "",
    polar: "",
  },
  mobius: {
    polar: "",
    spherical: "",
  },
  polar: {
    toroidal: "",
  },
  spherical: {
    toroidal: "",
  },
};

export type VariantName = keyof typeof variants;
export const variants = {
  ["Chess"]: {
    description: "Your usual bog-standard game of chess (sans en passant).",
    rules: [standard, loseWithNoKings, pawnDoubleStep, castling, Interception],
  },
  ["Cylindrical Chess"]: {
    description: "Chess on a Cylinder! You can move through the sides of the board.",
    rules: [
      standard,
      loseWithNoKings,
      pawnDoubleStep,
      cylindrical,
      castling,
      Interception,
    ],
  },
  ["Spherical Chess"]: {
    description:
      "Chess on a sphere! You can move through the sides like you're on a cylinder, and through the top and bottom as if they were the poles of a sphere.",
    rules: [
      standard,
      loseWithNoKings,
      pawnDoubleStep,
      cylindrical,
      polar,
      castling,
      Interception,
    ],
  },
  ["Hex Chess"]: {
    description:
      "Chess but with hexagons instead of squares. Watch out for the sneaky bishops.",
    rules: [hex, loseWithNoKings, pawnDoubleStep, castling, Interception],
  },
  ["Cylindrical Hex Chess"]: {
    description: "Hexagonal chess where you can move through the sides of the board!",
    rules: [hex, loseWithNoKings, pawnDoubleStep, hexCylindrical, castling, Interception],
  },
  ["Toroidal Chess"]: {
    description:
      "Chess on a torus! You can move through any edge onto the opposite edge.",
    rules: [
      longBoard,
      cylindrical,
      verticallyCylindrical,
      loseWithNoKings,
      pawnDoubleStep,
      castling,
      Interception,
    ],
  },
  ["Möbius Chess"]: {
    description:
      "Chess on a Möbius strip! You can move through the top and bottom edges, and you can see the pieces on the opposite side of the strip!",
    rules: [
      mobius,
      passiveMoveThroughBoard,
      longBoard,
      verticallyCylindrical,
      loseWithNoKings,
      pawnDoubleStep,
      castling,
      Interception,
    ],
  },
  ["Variant Fusion"]: {
    description: "A custom fusion of variants.",
    rules: [],
  },
};

export interface futureVariantDetails {
  title: string;
  shortDescription: string;
  traitClasses: TraitClasses[];
  imageName: keyof typeof VariantImages;
  implemented: boolean;
  rules: Rule[];
}

export type FutureVariantName = keyof typeof futureVariants;
export const futureVariants: { [id: string]: futureVariantDetails } = {
  ["alice"]: {
    title: "Alice",
    shortDescription: "Pieces move between worlds.",
    traitClasses: ["world"],
    imageName: "aliceImage",
    implemented: false,
    rules: [],
  },
  ["ambiguous"]: {
    title: "Ambiguous",
    shortDescription: "Choose a square and your opponent chooses the move.",
    traitClasses: ["interaction", "restriction"],
    imageName: "ambiguousImage",
    implemented: false,
    rules: [],
  },
  ["armageddon"]: {
    title: "Armageddon",
    shortDescription:
      "Captures lead to a large explosion. Pawns are immune to the blast zone.",
    traitClasses: ["ability"],
    imageName: "armageddonImage",
    implemented: false,
    rules: [],
  },
  ["atomic"]: {
    title: "Atomic",
    shortDescription:
      "Captures lead to a small explosion. Pawns are immune to the blast zone.",
    traitClasses: ["ability"],
    imageName: "atomicImage",
    implemented: true,
    rules: [atomic],
  },
  ["avalanche"]: {
    title: "Avalanche",
    shortDescription: "After moving, make a non capturing pawn move for your opponent.",
    traitClasses: ["piece", "interaction"],
    imageName: "avalancheImage",
    implemented: false,
    rules: [],
  },
  ["captureExplosion"]: {
    title: "Capture Explosion",
    shortDescription:
      "Pieces capture themselves and diagonal neighbours after capturing.",
    traitClasses: ["ability"],
    imageName: "captureExplosionImage",
    implemented: false,
    rules: [],
  },
  ["castleAnyside"]: {
    title: "Castle Anyside",
    shortDescription: "Kings can castle with any friendly piece on a straight line.",
    traitClasses: ["ability"],
    imageName: "castleAnysideImage",
    implemented: false,
    rules: [],
  },
  ["castleForever"]: {
    title: "Castle Forever",
    shortDescription: "Moving pieces does not remove their castling rights.",
    traitClasses: ["ability"],
    imageName: "castleForeverImage",
    implemented: false,
    rules: [],
  },
  ["catapult"]: {
    title: "Catapult",
    shortDescription: "Pieces can throw other pieces occupying the same square.",
    traitClasses: ["ability"],
    imageName: "catapultImage",
    implemented: false,
    rules: [],
  },
  ["centerRemoval"]: {
    title: "Center Removal",
    shortDescription: "Center squares and the pieces on them are removed from the game.",
    traitClasses: ["world"],
    imageName: "centerRemovalImage",
    implemented: false,
    rules: [],
  },
  ["centerfold"]: {
    title: "Centerfold",
    shortDescription:
      "The board is folded along the vertical center line and column ends are glued.",
    traitClasses: ["geometry"],
    imageName: "centerfoldImage",
    implemented: false,
    rules: [],
  },
  ["chainReaction"]: {
    title: "Chain Reaction",
    shortDescription: "A captured piece captures all pieces it is attacking.",
    traitClasses: ["ability"],
    imageName: "chainReactionImage",
    implemented: false,
    rules: [],
  },
  ["chemicallyExcitedKnight"]: {
    title: "Chemically Excited Knight",
    shortDescription: "Any time a knight is attacking 3 pieces, it explodes.",
    traitClasses: ["piece", "ability"],
    imageName: "chemicallyExcitedKnightImage",
    implemented: false,
    rules: [],
  },
  ["chessPlus"]: {
    title: "Chess +",
    shortDescription: "2 non-king pieces are allowed on a square.",
    traitClasses: ["ability"],
    imageName: "chessPlusImage",
    implemented: false,
    rules: [],
  },
  ["claudiusPromotion"]: {
    title: "Claudius Promotion",
    shortDescription: "Pawns may promote to replace a king.",
    traitClasses: ["piece", "ability"],
    imageName: "claudiusPromotionImage",
    implemented: false,
    rules: [],
  },
  ["colourBlindSignal"]: {
    title: "Colour Blind Signalling",
    shortDescription: "Signal pieces of any colour to move them next turn.",
    traitClasses: ["interaction", "restriction"],
    imageName: "colourBlindSignalImage",
    implemented: false,
    rules: [],
  },
  ["combinationMove"]: {
    title: "Combination Move",
    shortDescription: "Move multiple pieces off of the same square.",
    traitClasses: ["ability"],
    imageName: "combinationMoveImage",
    implemented: false,
    rules: [],
  },
  ["compactify"]: {
    title: "Compactify",
    shortDescription:
      "Columns without pieces are destroyed, with the board closing around the empty space.",
    traitClasses: ["world"],
    imageName: "compactifyImage",
    implemented: false,
    rules: [],
  },
  ["connectFive"]: {
    title: "Connect Four",
    shortDescription: "5 friendly pieces diagonally connected win the game.",
    traitClasses: ["game end"],
    imageName: "connectFiveImage",
    implemented: false,
    rules: [],
  },
  ["connectFour"]: {
    title: "Connect Five",
    shortDescription: "4 friendly pawns diagonally connected win the game.",
    traitClasses: ["game end"],
    imageName: "connectFourImage",
    implemented: false,
    rules: [],
  },
  ["coordination"]: {
    title: "Coordination",
    shortDescription: "Move multiple pieces to the same square.",
    traitClasses: ["ability"],
    imageName: "coordinationImage",
    implemented: false,
    rules: [],
  },
  ["crazyhouse"]: {
    title: "Crazyhouse",
    shortDescription: "Play captured pieces on the board.",
    traitClasses: ["ability"],
    imageName: "crazyhouseImage",
    implemented: false,
    rules: [],
  },
  ["cylinder"]: {
    title: "Cylinder",
    shortDescription: "End columns of the board are glued together.",
    traitClasses: ["geometry"],
    imageName: "cylinderImage",
    implemented: true,
    rules: [cylindrical],
  },
  ["dancingKings"]: {
    title: "Dancing Kings",
    shortDescription: "Keep the king moving or lose the game.",
    traitClasses: ["piece", "game end"],
    imageName: "dancingKingsImage",
    implemented: false,
    rules: [],
  },
  ["diagonalMirror"]: {
    title: "Diagonal Mirror",
    shortDescription: "Diagonal movers bounce off the end of the board.",
    traitClasses: ["world"],
    imageName: "diagonalMirrorImage",
    implemented: false,
    rules: [],
  },
  ["diagonalValley"]: {
    title: "Diagonal Valley",
    shortDescription: "The board is a valley bottoming out along the main diagonals.",
    traitClasses: ["world"],
    imageName: "diagonalValleyImage",
    implemented: false,
    rules: [],
  },
  ["dpsKing"]: {
    title: "DPS King",
    shortDescription: "Kings can capture all pieces surrounding them.",
    traitClasses: ["piece", "ability"],
    imageName: "dpsKingImage",
    implemented: false,
    rules: [],
  },
  ["emptyCenter"]: {
    title: "Empty Center",
    shortDescription: "Pieces can move through but not on the center of the board.",
    traitClasses: ["restriction"],
    imageName: "emptyCenterImage",
    implemented: false,
    rules: [],
  },
  ["extinction"]: {
    title: "Extinction",
    shortDescription: "Lose the game if any piece goes extinct.",
    traitClasses: ["game end"],
    imageName: "extinctionImage",
    implemented: false,
    rules: [],
  },
  ["fatigue"]: {
    title: "Fatigue",
    shortDescription:
      "Pieces can't be moved twice in a row, unless they can kill the king.",
    traitClasses: ["restriction"],
    imageName: "fatigueImage",
    implemented: true,
    rules: [fatigue],
  },
  ["fortifications"]: {
    title: "Fortifications",
    shortDescription: "Rooks cannot capture or be captured.",
    traitClasses: ["piece", "ability"],
    imageName: "fortificationsImage",
    implemented: false,
    rules: [],
  },
  ["fourHorsemenOfTheApocalypse"]: {
    title: "Four Horsemen of the Apocalypse",
    shortDescription: "Control 4 knights on board to win the game.",
    traitClasses: ["game end"],
    imageName: "fourHorsemenOfTheApocalypseImage",
    implemented: false,
    rules: [],
  },
  ["gambit"]: {
    title: "Gambit",
    shortDescription: "Pieces may capture friendly pieces.",
    traitClasses: ["ability"],
    imageName: "gambitImage",
    implemented: false,
    rules: [],
  },
  ["generalEnpassant"]: {
    title: "General Enpassant",
    shortDescription: "Any piece can enpassant any other.",
    traitClasses: ["ability"],
    imageName: "generalEnpassantImage",
    implemented: false,
    rules: [],
  },
  ["goCapture"]: {
    title: "Go Capture",
    shortDescription: "Capture pieces by surrounding them in a line without gaps.",
    traitClasses: ["ability"],
    imageName: "goCaptureImage",
    implemented: false,
    rules: [],
  },
  ["hex"]: {
    title: "Hex",
    shortDescription: "A board tiled with hexagons.",
    traitClasses: ["world"],
    imageName: "hexImage",
    implemented: true,
    rules: [hex],
  },
  ["hill"]: {
    title: "Hill",
    shortDescription: "An elevation at the center of the board.",
    traitClasses: ["world"],
    imageName: "hillImage",
    implemented: false,
    rules: [],
  },
  ["horizontalValley"]: {
    title: "Horizontal Valley",
    shortDescription: "The board is a valley bottoming out at the center rows.",
    traitClasses: ["world"],
    imageName: "horizontalValleyImage",
    implemented: false,
    rules: [],
  },
  ["infiniteStaircase"]: {
    title: "Infinite Staircase",
    shortDescription:
      "The board decends forever to white's left and ascends forever to the right.",
    traitClasses: ["world", "geometry"],
    imageName: "infiniteStaircaseImage",
    implemented: false,
    rules: [],
  },
  ["invertedPyramid"]: {
    title: "Inverted Pyramid",
    shortDescription: "The board decends in layers bottoming out at the center.",
    traitClasses: ["world"],
    imageName: "invertedPyramidImage",
    implemented: false,
    rules: [],
  },
  ["jumble"]: {
    title: "Jumble",
    shortDescription: "Move multiple pieces on and off of the same square.",
    traitClasses: ["ability"],
    imageName: "jumbleImage",
    implemented: false,
    rules: [],
  },
  ["kingOfTheHill"]: {
    title: "King of the Hill",
    shortDescription: "Win the game with a king reaching the center.",
    traitClasses: ["game end"],
    imageName: "kingOfTheHillImage",
    implemented: false,
    rules: [],
  },
  ["kingOfTheSixthRank"]: {
    title: "King of the 6th Rank",
    shortDescription: "Win the game with a king reaching the 6th rank.",
    traitClasses: ["game end"],
    imageName: "kingOfTheSixthRankImage",
    implemented: false,
    rules: [],
  },
  ["lethalPressure"]: {
    title: "Lethal Pressure",
    shortDescription: "Pieces attacked 4 or more times are captured.",
    traitClasses: ["ability"],
    imageName: "lethalPressureImage",
    implemented: false,
    rules: [],
  },
  ["limitedReaction"]: {
    title: "Limited Reaction",
    shortDescription:
      "A captured piece captures all pieces it is attacking, except if the piece was captured via limited reaction.",
    traitClasses: ["ability"],
    imageName: "limitedReactionImage",
    implemented: false,
    rules: [],
  },
  ["loseOnStalemate"]: {
    title: "Lose On Stalemate",
    shortDescription: "Having no legal moves is a loss.",
    traitClasses: ["game end"],
    imageName: "loseOnStalemateImage",
    implemented: false,
    rules: [],
  },
  ["mobius"]: {
    title: "Mobius",
    shortDescription:
      "A long board mobius strip, with the ability to phase through to empty squares.",
    traitClasses: ["geometry", "world"],
    imageName: "mobiusImage",
    implemented: true,
    rules: [mobius, longBoard, passiveMoveThroughBoard, verticallyCylindrical],
  },
  ["monochromatic"]: {
    title: "Monochromatic",
    shortDescription: "Pieces must move onto the same coloured square.",
    traitClasses: ["restriction"],
    imageName: "monochromaticImage",
    implemented: false,
    rules: [],
  },
  ["moraleVictory"]: {
    title: "Morale Victory",
    shortDescription: "Lose the game without any pawns.",
    traitClasses: ["game end"],
    imageName: "moraleVictoryImage",
    implemented: false,
    rules: [],
  },
  ["morphlings"]: {
    title: "Morphlings",
    shortDescription: "After moving bishops become knights and knights become bishops.",
    traitClasses: ["piece", "ability"],
    imageName: "morphlingsImage",
    implemented: false,
    rules: [],
  },
  ["moveAsterixMoveAsterixAsterixSignal"]: {
    title: "Move* Move** Signal",
    shortDescription: "An unsignalled piece, the signalled piece, signal a piece.",
    traitClasses: ["interaction"],
    imageName: "moveAsterixMoveAsterixAsterixSignalImage",
    implemented: false,
    rules: [],
  },
  ["noFork"]: {
    title: "No Fork",
    shortDescription: "Knights can no longer attack 2 or more pieces.",
    traitClasses: ["piece", "restriction"],
    imageName: "noForkImage",
    implemented: false,
    rules: [],
  },
  ["noPin"]: {
    title: "No Pin",
    shortDescription:
      "Bishops cannot attack a piece if when the piece is removed the bishop would be attacking another piece.",
    traitClasses: ["piece", "restriction"],
    imageName: "noPinImage",
    implemented: false,
    rules: [],
  },
  ["parity"]: {
    title: "Parity",
    shortDescription: "Pieces must move onto a different coloured square.",
    traitClasses: ["restriction"],
    imageName: "parityImage",
    implemented: false,
    rules: [],
  },
  ["patheticKing"]: {
    title: "Pathetic King",
    shortDescription: "Kings cannot capture.",
    traitClasses: ["piece", "restriction"],
    imageName: "patheticKingImage",
    implemented: false,
    rules: [],
  },
  ["pawnOrbit"]: {
    title: "Pawn Orbit",
    shortDescription: "Isolated pawns can shift all neighbouring pieces clockwise.",
    traitClasses: ["piece", "ability"],
    imageName: "pawnOrbitImage",
    implemented: false,
    rules: [],
  },
  ["phaseKing"]: {
    title: "Phase King",
    shortDescription: "Kings may move onto friendly pieces.",
    traitClasses: ["piece", "ability"],
    imageName: "phaseKingImage",
    implemented: false,
    rules: [],
  },
  ["pinch"]: {
    title: "Pinch",
    shortDescription: "Length 2 diagonals are glued on their ends in each corner.",
    traitClasses: ["geometry"],
    imageName: "pinchImage",
    implemented: false,
    rules: [],
  },
  ["polar"]: {
    title: "Polar",
    shortDescription: "Slide through end rows and re-emerge through the same row.",
    traitClasses: ["geometry"],
    imageName: "polarImage",
    implemented: true,
    rules: [polar],
  },
  ["prism"]: {
    title: "Prism",
    shortDescription: "Reflect or refract pieces over the ends of the board.",
    traitClasses: ["geometry", "world"],
    imageName: "prismImage",
    implemented: false,
    rules: [],
  },
  ["pull"]: {
    title: "Pull",
    shortDescription: "Pull chains of neighbouring friendly pieces.",
    traitClasses: ["ability"],
    imageName: "pullImage",
    implemented: false,
    rules: [],
  },
  ["puppeteers"]: {
    title: "Puppeteers",
    shortDescription: "Any piece defended by a knight can move as a knight.",
    traitClasses: ["piece", "ability"],
    imageName: "puppeteersImage",
    implemented: false,
    rules: [],
  },
  ["push"]: {
    title: "Push",
    shortDescription: "Push chains of neighbouring friendly pieces.",
    traitClasses: ["ability"],
    imageName: "pushImage",
    implemented: false,
    rules: [],
  },
  ["regicide"]: {
    title: "Regicide",
    shortDescription: "Lose the game without a queen.",
    traitClasses: ["game end"],
    imageName: "regicideImage",
    implemented: false,
    rules: [],
  },
  ["retreatingPawns"]: {
    title: "Retreating Pawns",
    shortDescription:
      "Pawns will run backwards after losing a defender, until redefended.",
    traitClasses: ["piece", "interaction"],
    imageName: "retreatingPawnsImage",
    implemented: false,
    rules: [],
  },
  ["seventhRankPromotion"]: {
    title: "7th Rank Promotion",
    shortDescription: "Promote on the 7th rank.",
    traitClasses: ["game end"],
    imageName: "seventhRankPromotionImage",
    implemented: false,
    rules: [],
  },
  ["signal"]: {
    title: "Signal",
    shortDescription: "Signal a piece to move it next turn.",
    traitClasses: ["restriction"],
    imageName: "signalImage",
    implemented: false,
    rules: [],
  },
  ["spherical"]: {
    title: "Spherical",
    shortDescription: "The board wrapped around a sphere. Cylinder together with Polar.",
    traitClasses: ["geometry"],
    imageName: "sphericalImage",
    implemented: true,
    rules: [cylindrical, polar],
  },
  ["stuckInTheMud"]: {
    title: "Stuck In The Mud",
    shortDescription: "Center squares may be stepped on, but not through.",
    traitClasses: ["restriction"],
    imageName: "stuckInTheMudImage",
    implemented: false,
    rules: [],
  },
  ["threeCheck"]: {
    title: "3-Check",
    shortDescription: "3 checks and you're out.",
    traitClasses: ["game end"],
    imageName: "threeCheckImage",
    implemented: false,
    rules: [],
  },
  ["toroidal"]: {
    title: "Toroidal",
    shortDescription: "Double the cylinder and pawns on a long board.",
    traitClasses: ["geometry", "world"],
    imageName: "toroidalImage",
    implemented: true,
    rules: [longBoard, cylindrical, verticallyCylindrical],
  },
  ["verticalValley"]: {
    title: "Vertical Valley",
    shortDescription: "The board is a valley bottoming out at the center columns.",
    traitClasses: ["world"],
    imageName: "verticalValleyImage",
    implemented: false,
    rules: [],
  },
  ["veto"]: {
    title: "Veto",
    shortDescription: "A move may be vetoed each turn.",
    traitClasses: ["interaction", "restriction"],
    imageName: "vetoImage",
    implemented: false,
    rules: [],
  },
  ["vocation"]: {
    title: "Vocation",
    shortDescription:
      "Any piece kind may promote to any other piece kind. Old kings become pawns.",
    traitClasses: ["ability"],
    imageName: "vocationImage",
    implemented: false,
    rules: [],
  },
  ["winOnCapture"]: {
    title: "Win on Capture",
    shortDescription: "Win by capturing an enemy piece with the king.",
    traitClasses: ["game end"],
    imageName: "winOnCaptureImage",
    implemented: false,
    rules: [],
  },
  ["winOnPromotion"]: {
    title: "Win on Promotion",
    shortDescription: "Win by promoting a piece.",
    traitClasses: ["game end"],
    imageName: "winOnPromotionImage",
    implemented: false,
    rules: [],
  },
  ["winOnStalemate"]: {
    title: "Win on Stalemate",
    shortDescription: "Win by having no legal moves.",
    traitClasses: ["game end"],
    imageName: "winOnStalemateImage",
    implemented: false,
    rules: [],
  },
  ["zoneOfControl"]: {
    title: "Zone of Control",
    shortDescription:
      "After moving past an enemy piece, only one more step can be taken.",
    traitClasses: ["ability", "restriction"],
    imageName: "zoneOfControlImage",
    implemented: false,
    rules: [],
  },
  ["zoneOfFatigue"]: {
    title: "Zone of Fatigue",
    shortDescription: "Moving past an enemy piece results in fatigue.",
    traitClasses: ["ability", "restriction"],
    imageName: "zoneOfFatigueImage",
    implemented: false,
    rules: [],
  },
};
