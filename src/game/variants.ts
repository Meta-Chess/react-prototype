import {
  castling,
  cylindrical,
  hex,
  hexCylindrical,
  loseWithNoKings,
  mobius,
  passiveMoveThroughBoard,
  pawnDoubleStep,
  polar,
  standard,
  longBoard,
  atomic,
  fatigue,
  Interception,
} from "./Rules";
import { verticallyCylindrical } from "game/Rules/verticallyCylindrical";
import { TraitClass } from "game/types";
import * as VariantImages from "primitives/VariantImage";
import { Rule } from "./Rules";

export const integrateWithOtherRules: { [key: string]: (rules: Rule[]) => Rule[] } = {
  Cylinder: (rules: Rule[]): Rule[] => {
    return rules.includes(hex) ? [hexCylindrical] : [cylindrical];
  },
  Standard: (rules: Rule[]): Rule[] => {
    return rules.includes(hex) || rules.includes(longBoard) ? [] : [standard];
  },
};

export type VariantName = keyof typeof variants;
export const variants = {
  Chess: {
    description: "Your usual bog-standard game of chess (sans en passant).",
    rules: [standard, loseWithNoKings, pawnDoubleStep, castling, Interception],
  },
  ["Cylindrical Chess"]: {
    description: "Chess on a Cylinder! You can move through the sides of the board.",
    rules: [
      standard,
      loseWithNoKings,
      pawnDoubleStep,
      cylindrical,
      castling,
      Interception,
    ],
  },
  ["Spherical Chess"]: {
    description:
      "Chess on a sphere! You can move through the sides like you're on a cylinder, and through the top and bottom as if they were the poles of a sphere.",
    rules: [
      standard,
      loseWithNoKings,
      pawnDoubleStep,
      cylindrical,
      polar,
      castling,
      Interception,
    ],
  },
  ["Hex Chess"]: {
    description:
      "Chess but with hexagons instead of squares. Watch out for the sneaky bishops.",
    rules: [hex, loseWithNoKings, pawnDoubleStep, castling, Interception],
  },
  ["Cylindrical Hex Chess"]: {
    description: "Hexagonal chess where you can move through the sides of the board!",
    rules: [hex, loseWithNoKings, pawnDoubleStep, hexCylindrical, castling, Interception],
  },
  ["Toroidal Chess"]: {
    description:
      "Chess on a torus! You can move through any edge onto the opposite edge.",
    rules: [
      longBoard,
      cylindrical,
      verticallyCylindrical,
      loseWithNoKings,
      pawnDoubleStep,
      castling,
      Interception,
    ],
  },
  ["Möbius Chess"]: {
    description:
      "Chess on a Möbius strip! You can move through the top and bottom edges, and you can see the pieces on the opposite side of the strip!",
    rules: [
      mobius,
      passiveMoveThroughBoard,
      longBoard,
      verticallyCylindrical,
      loseWithNoKings,
      pawnDoubleStep,
      castling,
      Interception,
    ],
  },
  ["Variant Fusion"]: {
    description: "A custom fusion of variants.",
    rules: [],
  },
};

export interface FutureVariant {
  title: string;
  shortDescription: string;
  TraitClass: TraitClass[];
  imageName: keyof typeof VariantImages;
  implemented: boolean;
  rules: Rule[];
}

export enum FutureVariantName {
  threeCheck = "threeCheck",
  armageddon = "armageddon",
  atomic = "atomic",
  catapult = "catapult",
  centerRemoval = "centerRemoval",
  chessPlus = "chessPlus",
  cylinder = "cylinder",
  diagonalMirror = "diagonalMirror",
  dpsKing = "dpsKing",
  emptyCenter = "emptyCenter",
  extinction = "extinction",
  kingOfTheSixthRank = "kingOfTheSixthRank",
  kingOfTheHill = "kingOfTheHill",
  monochromatic = "monochromatic",
  patheticKing = "patheticKing",
  phaseKing = "phaseKing",
  push = "push",
  seventhRankPromotion = "seventhRankPromotion",
  dancingKings = "dancingKings",
  alice = "alice",
  ambiguous = "ambiguous",
  avalanche = "avalanche",
  castleAnyside = "castleAnyside",
  castleForever = "castleForever",
  chainReaction = "chainReaction",
  chemicallyExcitedKnight = "chemicallyExcitedKnight",
  claudiusPromotion = "claudiusPromotion",
  colourBlindSignal = "colourBlindSignal",
  connectFour = "connectFour",
  connectFive = "connectFive",
  crazyhouse = "crazyhouse",
  captureExplosion = "captureExplosion",
  diagonalValley = "diagonalValley",
  fatigue = "fatigue",
  fortifications = "fortifications",
  fourHorsemenOfTheApocalypse = "fourHorsemenOfTheApocalypse",
  gambit = "gambit",
  hill = "hill",
  horizontalValley = "horizontalValley",
  infiniteStaircase = "infiniteStaircase",
  invertedPyramid = "invertedPyramid",
  limitedReaction = "limitedReaction",
  loseOnStalemate = "loseOnStalemate",
  moraleVictory = "moraleVictory",
  moveAsterixMoveAsterixAsterixSignal = "moveAsterixMoveAsterixAsterixSignal",
  noFork = "noFork",
  parity = "parity",
  polar = "polar",
  prism = "prism",
  regicide = "regicide",
  signal = "signal",
  spherical = "spherical",
  verticalValley = "verticalValley",
  veto = "veto",
  vocation = "vocation",
  winOnCapture = "winOnCapture",
  winOnPromotion = "winOnPromotion",
  winOnStalemate = "winOnStalemate",
  zoneOfControl = "zoneOfControl",
  zoneOfFatigue = "zoneOfFatigue",
  puppeteers = "puppeteers",
  lethalPressure = "lethalPressure",
  coordination = "coordination",
  retreatingPawns = "retreatingPawns",
  combinationMove = "combinationMove",
  pawnOrbit = "pawnOrbit",
  centerfold = "centerfold",
  goCapture = "goCapture",
  stuckInTheMud = "stuckInTheMud",
  compactify = "compactify",
  pinch = "pinch",
  morphlings = "morphlings",
  jumble = "jumble",
  pull = "pull",
  noPin = "noPin",
  hex = "hex",
  generalEnpassant = "generalEnpassant",
  toroidal = "toroidal",
  mobius = "mobius",
}

export const futureVariants: { [id in FutureVariantName]: FutureVariant } = {
  [FutureVariantName.alice]: {
    title: "Alice",
    shortDescription: "Pieces move between worlds.",
    TraitClass: ["world"],
    imageName: "aliceImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.ambiguous]: {
    title: "Ambiguous",
    shortDescription: "Choose a square and your opponent chooses the move.",
    TraitClass: ["interaction", "restriction"],
    imageName: "ambiguousImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.armageddon]: {
    title: "Armageddon",
    shortDescription:
      "Captures lead to a large explosion. Pawns are immune to the blast zone.",
    TraitClass: ["ability"],
    imageName: "armageddonImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.atomic]: {
    title: "Atomic",
    shortDescription:
      "Captures lead to a small explosion. Pawns are immune to the blast zone.",
    TraitClass: ["ability"],
    imageName: "atomicImage",
    implemented: true,
    rules: [atomic],
  },
  [FutureVariantName.avalanche]: {
    title: "Avalanche",
    shortDescription: "After moving, make a non capturing pawn move for your opponent.",
    TraitClass: ["piece", "interaction"],
    imageName: "avalancheImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.captureExplosion]: {
    title: "Capture Explosion",
    shortDescription:
      "Pieces capture themselves and diagonal neighbours after capturing.",
    TraitClass: ["ability"],
    imageName: "captureExplosionImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.castleAnyside]: {
    title: "Castle Anyside",
    shortDescription: "Kings can castle with any friendly piece on a straight line.",
    TraitClass: ["ability"],
    imageName: "castleAnysideImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.castleForever]: {
    title: "Castle Forever",
    shortDescription: "Moving pieces does not remove their castling rights.",
    TraitClass: ["ability"],
    imageName: "castleForeverImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.catapult]: {
    title: "Catapult",
    shortDescription: "Pieces can throw other pieces occupying the same square.",
    TraitClass: ["ability"],
    imageName: "catapultImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.centerRemoval]: {
    title: "Center Removal",
    shortDescription: "Center squares and the pieces on them are removed from the game.",
    TraitClass: ["world"],
    imageName: "centerRemovalImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.centerfold]: {
    title: "Centerfold",
    shortDescription:
      "The board is folded along the vertical center line and column ends are glued.",
    TraitClass: ["geometry"],
    imageName: "centerfoldImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.chainReaction]: {
    title: "Chain Reaction",
    shortDescription: "A captured piece captures all pieces it is attacking.",
    TraitClass: ["ability"],
    imageName: "chainReactionImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.chemicallyExcitedKnight]: {
    title: "Chemically Excited Knight",
    shortDescription: "Any time a knight is attacking 3 pieces, it explodes.",
    TraitClass: ["piece", "ability"],
    imageName: "chemicallyExcitedKnightImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.chessPlus]: {
    title: "Chess +",
    shortDescription: "2 non-king pieces are allowed on a square.",
    TraitClass: ["ability"],
    imageName: "chessPlusImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.claudiusPromotion]: {
    title: "Claudius Promotion",
    shortDescription: "Pawns may promote to replace a king.",
    TraitClass: ["piece", "ability"],
    imageName: "claudiusPromotionImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.colourBlindSignal]: {
    title: "Colour Blind Signalling",
    shortDescription: "Signal pieces of any colour to move them next turn.",
    TraitClass: ["interaction", "restriction"],
    imageName: "colourBlindSignalImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.combinationMove]: {
    title: "Combination Move",
    shortDescription: "Move multiple pieces off of the same square.",
    TraitClass: ["ability"],
    imageName: "combinationMoveImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.compactify]: {
    title: "Compactify",
    shortDescription:
      "Columns without pieces are destroyed, with the board closing around the empty space.",
    TraitClass: ["world"],
    imageName: "compactifyImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.connectFive]: {
    title: "Connect Four",
    shortDescription: "5 friendly pieces diagonally connected win the game.",
    TraitClass: ["game end"],
    imageName: "connectFiveImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.connectFour]: {
    title: "Connect Five",
    shortDescription: "4 friendly pawns diagonally connected win the game.",
    TraitClass: ["game end"],
    imageName: "connectFourImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.coordination]: {
    title: "Coordination",
    shortDescription: "Move multiple pieces to the same square.",
    TraitClass: ["ability"],
    imageName: "coordinationImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.crazyhouse]: {
    title: "Crazyhouse",
    shortDescription: "Play captured pieces on the board.",
    TraitClass: ["ability"],
    imageName: "crazyhouseImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.cylinder]: {
    title: "Cylinder",
    shortDescription: "End columns of the board are glued together.",
    TraitClass: ["geometry"],
    imageName: "cylinderImage",
    implemented: true,
    rules: [cylindrical],
  },
  [FutureVariantName.dancingKings]: {
    title: "Dancing Kings",
    shortDescription: "Keep the king moving or lose the game.",
    TraitClass: ["piece", "game end"],
    imageName: "dancingKingsImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.diagonalMirror]: {
    title: "Diagonal Mirror",
    shortDescription: "Diagonal movers bounce off the end of the board.",
    TraitClass: ["world"],
    imageName: "diagonalMirrorImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.diagonalValley]: {
    title: "Diagonal Valley",
    shortDescription: "The board is a valley bottoming out along the main diagonals.",
    TraitClass: ["world"],
    imageName: "diagonalValleyImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.dpsKing]: {
    title: "DPS King",
    shortDescription: "Kings can capture all pieces surrounding them.",
    TraitClass: ["piece", "ability"],
    imageName: "dpsKingImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.emptyCenter]: {
    title: "Empty Center",
    shortDescription: "Pieces can move through but not on the center of the board.",
    TraitClass: ["restriction"],
    imageName: "emptyCenterImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.extinction]: {
    title: "Extinction",
    shortDescription: "Lose the game if any piece goes extinct.",
    TraitClass: ["game end"],
    imageName: "extinctionImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.fatigue]: {
    title: "Fatigue",
    shortDescription:
      "Pieces can't be moved twice in a row, unless they can kill the king.",
    TraitClass: ["restriction"],
    imageName: "fatigueImage",
    implemented: true,
    rules: [fatigue],
  },
  [FutureVariantName.fortifications]: {
    title: "Fortifications",
    shortDescription: "Rooks cannot capture or be captured.",
    TraitClass: ["piece", "ability"],
    imageName: "fortificationsImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.fourHorsemenOfTheApocalypse]: {
    title: "Four Horsemen of the Apocalypse",
    shortDescription: "Control 4 knights on board to win the game.",
    TraitClass: ["game end"],
    imageName: "fourHorsemenOfTheApocalypseImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.gambit]: {
    title: "Gambit",
    shortDescription: "Pieces may capture friendly pieces.",
    TraitClass: ["ability"],
    imageName: "gambitImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.generalEnpassant]: {
    title: "General Enpassant",
    shortDescription: "Any piece can enpassant any other.",
    TraitClass: ["ability"],
    imageName: "generalEnpassantImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.goCapture]: {
    title: "Go Capture",
    shortDescription: "Capture pieces by surrounding them in a line without gaps.",
    TraitClass: ["ability"],
    imageName: "goCaptureImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.hex]: {
    title: "Hex",
    shortDescription: "A board tiled with hexagons.",
    TraitClass: ["world"],
    imageName: "hexImage",
    implemented: true,
    rules: [hex],
  },
  [FutureVariantName.hill]: {
    title: "Hill",
    shortDescription: "An elevation at the center of the board.",
    TraitClass: ["world"],
    imageName: "hillImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.horizontalValley]: {
    title: "Horizontal Valley",
    shortDescription: "The board is a valley bottoming out at the center rows.",
    TraitClass: ["world"],
    imageName: "horizontalValleyImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.infiniteStaircase]: {
    title: "Infinite Staircase",
    shortDescription:
      "The board decends forever to white's left and ascends forever to the right.",
    TraitClass: ["world", "geometry"],
    imageName: "infiniteStaircaseImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.invertedPyramid]: {
    title: "Inverted Pyramid",
    shortDescription: "The board decends in layers bottoming out at the center.",
    TraitClass: ["world"],
    imageName: "invertedPyramidImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.jumble]: {
    title: "Jumble",
    shortDescription: "Move multiple pieces on and off of the same square.",
    TraitClass: ["ability"],
    imageName: "jumbleImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.kingOfTheHill]: {
    title: "King of the Hill",
    shortDescription: "Win the game with a king reaching the center.",
    TraitClass: ["game end"],
    imageName: "kingOfTheHillImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.kingOfTheSixthRank]: {
    title: "King of the 6th Rank",
    shortDescription: "Win the game with a king reaching the 6th rank.",
    TraitClass: ["game end"],
    imageName: "kingOfTheSixthRankImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.lethalPressure]: {
    title: "Lethal Pressure",
    shortDescription: "Pieces attacked 4 or more times are captured.",
    TraitClass: ["ability"],
    imageName: "lethalPressureImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.limitedReaction]: {
    title: "Limited Reaction",
    shortDescription:
      "A captured piece captures all pieces it is attacking, except if the piece was captured via limited reaction.",
    TraitClass: ["ability"],
    imageName: "limitedReactionImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.loseOnStalemate]: {
    title: "Lose On Stalemate",
    shortDescription: "Having no legal moves is a loss.",
    TraitClass: ["game end"],
    imageName: "loseOnStalemateImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.mobius]: {
    title: "Mobius",
    shortDescription:
      "A long board mobius strip, with the ability to phase through to empty squares.",
    TraitClass: ["geometry", "world"],
    imageName: "mobiusImage",
    implemented: true,
    rules: [mobius, longBoard, passiveMoveThroughBoard, verticallyCylindrical],
  },
  [FutureVariantName.monochromatic]: {
    title: "Monochromatic",
    shortDescription: "Pieces must move onto the same coloured square.",
    TraitClass: ["restriction"],
    imageName: "monochromaticImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.moraleVictory]: {
    title: "Morale Victory",
    shortDescription: "Lose the game without any pawns.",
    TraitClass: ["game end"],
    imageName: "moraleVictoryImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.morphlings]: {
    title: "Morphlings",
    shortDescription: "After moving bishops become knights and knights become bishops.",
    TraitClass: ["piece", "ability"],
    imageName: "morphlingsImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.moveAsterixMoveAsterixAsterixSignal]: {
    title: "Move* Move** Signal",
    shortDescription: "An unsignalled piece, the signalled piece, signal a piece.",
    TraitClass: ["interaction"],
    imageName: "moveAsterixMoveAsterixAsterixSignalImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.noFork]: {
    title: "No Fork",
    shortDescription: "Knights can no longer attack 2 or more pieces.",
    TraitClass: ["piece", "restriction"],
    imageName: "noForkImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.noPin]: {
    title: "No Pin",
    shortDescription:
      "Bishops cannot attack a piece if when the piece is removed the bishop would be attacking another piece.",
    TraitClass: ["piece", "restriction"],
    imageName: "noPinImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.parity]: {
    title: "Parity",
    shortDescription: "Pieces must move onto a different coloured square.",
    TraitClass: ["restriction"],
    imageName: "parityImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.patheticKing]: {
    title: "Pathetic King",
    shortDescription: "Kings cannot capture.",
    TraitClass: ["piece", "restriction"],
    imageName: "patheticKingImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.pawnOrbit]: {
    title: "Pawn Orbit",
    shortDescription: "Isolated pawns can shift all neighbouring pieces clockwise.",
    TraitClass: ["piece", "ability"],
    imageName: "pawnOrbitImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.phaseKing]: {
    title: "Phase King",
    shortDescription: "Kings may move onto friendly pieces.",
    TraitClass: ["piece", "ability"],
    imageName: "phaseKingImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.pinch]: {
    title: "Pinch",
    shortDescription: "Length 2 diagonals are glued on their ends in each corner.",
    TraitClass: ["geometry"],
    imageName: "pinchImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.polar]: {
    title: "Polar",
    shortDescription: "Slide through end rows and re-emerge through the same row.",
    TraitClass: ["geometry"],
    imageName: "polarImage",
    implemented: true,
    rules: [polar],
  },
  [FutureVariantName.prism]: {
    title: "Prism",
    shortDescription: "Reflect or refract pieces over the ends of the board.",
    TraitClass: ["geometry", "world"],
    imageName: "prismImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.pull]: {
    title: "Pull",
    shortDescription: "Pull chains of neighbouring friendly pieces.",
    TraitClass: ["ability"],
    imageName: "pullImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.puppeteers]: {
    title: "Puppeteers",
    shortDescription: "Any piece defended by a knight can move as a knight.",
    TraitClass: ["piece", "ability"],
    imageName: "puppeteersImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.push]: {
    title: "Push",
    shortDescription: "Push chains of neighbouring friendly pieces.",
    TraitClass: ["ability"],
    imageName: "pushImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.regicide]: {
    title: "Regicide",
    shortDescription: "Lose the game without a queen.",
    TraitClass: ["game end"],
    imageName: "regicideImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.retreatingPawns]: {
    title: "Retreating Pawns",
    shortDescription:
      "Pawns will run backwards after losing a defender, until redefended.",
    TraitClass: ["piece", "interaction"],
    imageName: "retreatingPawnsImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.seventhRankPromotion]: {
    title: "7th Rank Promotion",
    shortDescription: "Promote on the 7th rank.",
    TraitClass: ["game end"],
    imageName: "seventhRankPromotionImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.signal]: {
    title: "Signal",
    shortDescription: "Signal a piece to move it next turn.",
    TraitClass: ["restriction"],
    imageName: "signalImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.spherical]: {
    title: "Spherical",
    shortDescription: "The board wrapped around a sphere. Cylinder together with Polar.",
    TraitClass: ["geometry"],
    imageName: "sphericalImage",
    implemented: true,
    rules: [cylindrical, polar],
  },
  [FutureVariantName.stuckInTheMud]: {
    title: "Stuck In The Mud",
    shortDescription: "Center squares may be stepped on, but not through.",
    TraitClass: ["restriction"],
    imageName: "stuckInTheMudImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.threeCheck]: {
    title: "3-Check",
    shortDescription: "3 checks and you're out.",
    TraitClass: ["game end"],
    imageName: "threeCheckImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.toroidal]: {
    title: "Toroidal",
    shortDescription: "Double the cylinder and pawns on a long board.",
    TraitClass: ["geometry", "world"],
    imageName: "toroidalImage",
    implemented: true,
    rules: [longBoard, cylindrical, verticallyCylindrical],
  },
  [FutureVariantName.verticalValley]: {
    title: "Vertical Valley",
    shortDescription: "The board is a valley bottoming out at the center columns.",
    TraitClass: ["world"],
    imageName: "verticalValleyImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.veto]: {
    title: "Veto",
    shortDescription: "A move may be vetoed each turn.",
    TraitClass: ["interaction", "restriction"],
    imageName: "vetoImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.vocation]: {
    title: "Vocation",
    shortDescription:
      "Any piece kind may promote to any other piece kind. Old kings become pawns.",
    TraitClass: ["ability"],
    imageName: "vocationImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.winOnCapture]: {
    title: "Win on Capture",
    shortDescription: "Win by capturing an enemy piece with the king.",
    TraitClass: ["game end"],
    imageName: "winOnCaptureImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.winOnPromotion]: {
    title: "Win on Promotion",
    shortDescription: "Win by promoting a piece.",
    TraitClass: ["game end"],
    imageName: "winOnPromotionImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.winOnStalemate]: {
    title: "Win on Stalemate",
    shortDescription: "Win by having no legal moves.",
    TraitClass: ["game end"],
    imageName: "winOnStalemateImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.zoneOfControl]: {
    title: "Zone of Control",
    shortDescription:
      "After moving past an enemy piece, only one more step can be taken.",
    TraitClass: ["ability", "restriction"],
    imageName: "zoneOfControlImage",
    implemented: false,
    rules: [],
  },
  [FutureVariantName.zoneOfFatigue]: {
    title: "Zone of Fatigue",
    shortDescription: "Moving past an enemy piece results in fatigue.",
    TraitClass: ["ability", "restriction"],
    imageName: "zoneOfFatigueImage",
    implemented: false,
    rules: [],
  },
};

export const variantsBlacklist: { [key in FutureVariantName]?: FutureVariantName[] } = {
  [FutureVariantName.hex]: [
    FutureVariantName.toroidal,
    FutureVariantName.mobius,
    FutureVariantName.spherical,
    FutureVariantName.polar,
  ],
  [FutureVariantName.mobius]: [FutureVariantName.polar, FutureVariantName.spherical],
  [FutureVariantName.polar]: [FutureVariantName.toroidal],
  [FutureVariantName.spherical]: [FutureVariantName.toroidal],
};
